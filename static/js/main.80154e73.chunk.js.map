{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weathericon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeid","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.80154e73.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nconst Weather = (props) => {\r\n\treturn (\r\n\t <div className = 'container text-light'>\r\n\t <div className= 'cards pt-4'>\r\n\t <h1> {props.city} </h1> \r\n\t <h5 className= 'py-4'>\r\n\t <i className= {`wi ${props.weathericon} display-1`}> </i>\r\n\t </h5>\r\n\t {props.temp_celsius ? (<h1 className= 'py-2'>{props.temp_celsius}&deg;</h1>):null}\r\n\t {minmaxTemp(props.temp_min,props.temp_max)}\r\n\t <h4 className='py-3'> {props.description}</h4> \r\n\r\n\t </div> \r\n\t </div>\r\n\r\n\t\t);\r\n}\r\n\r\nfunction minmaxTemp(min,max) {\r\n\tif(min&&max) {\r\n\t\treturn (\r\n\t\t<h3>\r\n\t\t<span className='px-4'>{min}&deg;</span>\r\n\t\t<span className='px-4'>{max}&deg;</span>\r\n\t\t</h3>\r\n\t\t\t)\r\n\t}\r\n\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport './form.style.css';\r\n\r\nconst Form = props => {\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t<div>{props.error? error(): null}</div>\r\n\t\t<form onSubmit={props.loadweather}>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t<div className=\"col-md-3 offset-md-2\">\r\n\t\t<input type=\"text\" className=\"form-control\"name=\"city\" autoComplete=\"off\" placeholder=\"city\"/>\r\n\t\t</div>\r\n\t\t<div className=\"col-md-3\">\r\n\t\t<input type=\"text\"className=\"form-control\" name=\"country\" autoComplete=\"off\" placeholder=\"country\"/>\r\n\t\t</div>\r\n\t\t<div className=\"col-md-3 mt-md 0 py-2 text-md-left\">\r\n\t\t<button className=\"btn btn-warning\">Get Weather</button>\r\n\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t</form>\r\n\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\nfunction error() {\r\n\treturn (\r\n\t\t<div className=\"alert alert-danger mx-5\"role=\"alert\">\r\n\t\tPlease Enter City and Country\r\n\t\t</div>\r\n\t\t)\r\n}\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport 'weather-icons/css/weather-icons.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from './app_component/weather.component';\nimport Form from './app_component/form.component';\n\nconst API_key = 'c19baa8d76a3f47eb973d1a4eeb7affb'\n\nclass App extends React.Component {\n constructor() {\n  super();\n  this.state= {\n    city: undefined,\n    country: undefined,\n    icon: undefined,\n    main: undefined,\n    celsius: undefined,\n    temp_max: undefined,\n    temp_min: undefined,\n    description: \"\",\n    error: false \n\n  };\n\n  this.weathericon= {\n    Thunderstorm: 'wi-thunderstorm', \n    Drizzle: 'wi-sleet',\n    Rain: 'wi-storm-showers',\n    Snow:  'wi-snow',\n    Atmosphere: 'wi-fog',\n    Clear: 'wi-day-sunny',\n    Clouds: 'wi-day-fog'\n  }\n\n }\n calCelsius(temp) {\n  let cell = Math.floor(temp - 273.15)\n  return cell\n\n }\n\n get_WeatherIcon(icons,rangeid) {\n  switch(true) {\n    case rangeid >= 200 && rangeid <= 232:\n    this.setState({icon:this.weathericon.Thunderstorm})\n    break;\n     case rangeid >= 300 && rangeid <= 321:\n    this.setState({icon:this.weathericon.Drizzle})\n    break;\n     case rangeid >= 500 && rangeid <= 531:\n    this.setState({icon:this.weathericon.Rain})\n    break;\n     case rangeid >= 600 && rangeid <= 622:\n    this.setState({icon:this.weathericon.Snow})\n    break;\n     case rangeid >= 701 && rangeid <= 781:\n    this.setState({icon:this.weathericon.Atmosphere})\n    break;\n     case rangeid === 800:\n    this.setState({icon:this.weathericon.Clear})\n    break;\n     case rangeid >= 801 && rangeid <= 804:\n    this.setState({icon:this.weathericon.Clouds})\n    break;\n    default:\n    this.setState({icon:this.weathericon.Clouds})\n\n\n  }\n }\n getWeather= async(e) => {\n  e.preventDefault();\n  const city = e.target.elements.city.value\n  const country = e.target.elements.country.value\n  if(city&&country) {\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`)\n  const response = await api_call.json();\n  console.log(response);\n  this.setState({\n    city: `${response.name},${response.sys.country}`,\n    celsius: this.calCelsius(response.main.temp),\n    temp_max: this.calCelsius(response.main.temp_max),\n    temp_min: this.calCelsius(response.main.temp_min),\n    description: response.weather[0].description,\n    error: false\n\n  });\n  this.get_WeatherIcon(this.weathericon, response.weather[0].id);\n} else {\n  this.setState({error: true});\n}\n\n }\n  render() {\n    return (\n     <div className=\"App\">\n     <Form loadweather={this.getWeather}error={this.state.error}/>\n    <Weather \n    city={this.state.city}\n    country={this.state.country} \n    temp_celsius ={this.state.celsius}\n    temp_max={this.state.temp_max}  \n    temp_min={this.state.temp_min}\n    description={this.state.description}\n    weathericon= {this.state.icon} />\n\n    </div>\n     );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}